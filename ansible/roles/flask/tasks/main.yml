---

# Tasks for flask 
  - name: Installing flask prerequisites
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - python3-pip
      - python3-dev
      - build-essential
      - libssl-dev
      - libffi-dev
      - python3-setuptools
      - python-setuptools
      - libpq-dev
      - sleuthkit

  - name: Installing python3-venv
    apt:
      name: python3-venv
      update_cache: yes

  - name: Installing python3-pip
    apt:
      name: python3-pip
      update_cache: yes
   
  - name: Copy source code to server
    copy:
      src: ../../../backend/
      dest: /tmp/fimetis/backend

  - name: Moving flask backend code to /opt
    shell: mv /tmp/fimetis/backend /opt --backup=numbered
    
  - name: Setting fimetis user and db for postgres
    lineinfile:
      dest: /opt/backend/postgres_lib.py
      regexp: "^PG_DB =.*"
      line: "PG_DB = '{{ pg_db }}'"

  - name: Setting fimetis user for postgres
    lineinfile:
      dest: /opt/backend/postgres_lib.py
      regexp: "^PG_USER =.*"
      line: "PG_USER = '{{ pg_user }}'"
    
  - name: Setting external user group
    lineinfile:
      dest: /opt/backend/postgres_lib.py
      regexp: "^EXTERNAL_USER_GROUP =.*"
      line: "EXTERNAL_USER_GROUP = '{{ oidc_user_group_urn }}'"

  - name: Setting external admin group
    lineinfile:
      dest: /opt/backend/postgres_lib.py
      regexp: "^EXTERNAL_ADMIN_GROUP =.*"
      line: "EXTERNAL_ADMIN_GROUP = '{{ oidc_admin_group_urn }}'"

  - name: Setting token introspect url
    lineinfile:
      dest: /opt/backend/backendAPI.py
      regexp: "^app\\.config\\['oidc_introspect_url'\\] =.*"
      line: "app.config['oidc_introspect_url'] = '{{ oidc_introspect_url }}'"

  - name: Setting oidc client_id
    lineinfile:
      dest: /opt/backend/backendAPI.py
      regexp: "^app\\.config\\['oidc_client_id'\\] =.*"
      line: "app.config['oidc_client_id'] = '{{ oidc_client_id }}'"

  - name: Setting oidc client_secret
    lineinfile:
      dest: /opt/backend/backendAPI.py
      regexp: "^app\\.config\\['oidc_client_secret'\\] =.*"
      line: "app.config['oidc_client_secret'] = '{{ oidc_client_secret }}'"

  - name: Cleaning nonused source codes from downloaded repo
    file:
      path: /tmp/kypo2-analytical-node
      state: absent

  - name: Installing virtualenv
    shell: pip3 install virtualenv

  - name: Creating virtualenv for flask
    shell: virtualenv /opt/backend/venv -p python3 creates="/opt/backend/venv"

  - name: Updating pip in virtualenv for flask
    shell: source /opt/backend/venv/bin/activate && pip install -U pip
    args:
      executable: /bin/bash 

  - name: Installing flask requirements into virtualenv
    pip:
      requirements=/opt/backend/py_requirements
      executable=/opt/backend/venv/bin/pip

  - name: Placing backendAPI.ini config for running flask as production using wsgi
    copy:
      src: "{{ role_path }}/files/backendAPI.ini"
      dest: /opt/backend/

  - name: Placing backendAPI.service for running flask as production using wsgi
    copy:
      src: "{{ role_path }}/files/backendAPI.service"
      dest: /etc/systemd/system/

  - name: Chowning /opt/backend to user www-data
    shell:  chown www-data:www-data -R /opt/backend

  - name: Prepare folder for logs
    file: 
       path: /var/log/fimetis/
       owner: www-data 
       group: www-data 
       state: directory

  - name: Starting backendAPI.service
    systemd:
      name: backendAPI
      daemon_reload: yes
      enabled: yes
      state: started 
 
  - name: Placing backendAPI template for nginx to sites-available
    template:
      src: backendAPI.j2
      dest: /etc/nginx/sites-available/backendAPI

  - name: Setting backend flask reverse port in sites-available
    lineinfile:
      dest: /etc/nginx/sites-available/backendAPI
      regexp: "^.*listen .*"
      line: "    listen {{ backend_port }};"

  - name: Creating symlinks for nginx config to sites-enabled
    file:
      src: "/etc/nginx/sites-available/{{ item }}"
      dest: "/etc/nginx/sites-enabled{{ item }}"
      state: link
    with_items:
      - backendAPI

  - name: Restarting nginx
    systemd: 
      name: nginx
      state: restarted

